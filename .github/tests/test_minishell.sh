#!/bin/bash

MINISHELL=./minishell

OK=0
FAIL=0

run_test() {
    CMD="$1"
    EXPECT="$2"
    OUT=$($MINISHELL <<< "$CMD" 2>&1 | grep -v 'ms: ‚ûú' | grep -v '^üêö' | sed '/^exit$/d' | sed '/^$/d')
    if [ "$OUT" = "$EXPECT" ]; then
        echo "‚úÖ '$CMD' => OK"
        ((OK++))
    else
        echo "‚ùå '$CMD' => FAIL"
        echo "   –û–∂–∏–¥–∞–ª–æ—Å—å: '$EXPECT'"
        echo "   –ü–æ–ª—É—á–µ–Ω–æ:  '$OUT'"
        ((FAIL++))
    fi
}

run_test "echo hello" "hello"
run_test "pwd" "$(pwd)"

touch testfile.c
run_test "ls *.c" "testfile.c"
rm testfile.c

run_test "export FOO=bar && echo \$FOO" "bar"
run_test "export FOO=bar && unset FOO && echo \$FOO" ""
run_test "echo hello world | wc -w" "2"
run_test "echo one two three | grep two" "one two three"
run_test "echo abc | tr a-z A-Z" "ABC"
run_test "echo 123 > out.txt && cat out.txt" "123"
run_test "echo first > out.txt && echo second >> out.txt && cat out.txt" $'first\nsecond'
run_test "ls non_existent_file" "ls: cannot access 'non_existent_file': No such file or directory"
run_test "false" ""
run_test "true && echo ok" "ok"
run_test "false || echo fail" "fail"
run_test "export A=1 B=2 && echo \$A \$B" "1 2"
run_test "env | grep ^PATH=" "$(env | grep ^PATH=)"
run_test "cd / && pwd" "/"

mkdir -p wildtest
touch wildtest/a.c wildtest/b.c wildtest/.hidden.c
run_test "cd wildtest && echo *.c" "a.c b.c"
run_test "cd wildtest && echo a*.c" "a.c"
run_test "cd wildtest && echo '*.c'" "*.c"
run_test "cd wildtest && echo *.cpp" "*.cpp"
run_test "cd wildtest && echo .*c" ".hidden.c"
run_test "cd wildtest && echo *" "a.c b.c"
cd ..
rm -rf wildtest

# --- heredoc + SIGINT (CTRL+C) ---
run_heredoc_sigint_test() {
    local name="heredoc SIGINT"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è util-linux `script`
    if ! command -v script >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ '$name': –Ω–µ –Ω–∞–π–¥–µ–Ω 'script'"; return
    fi

    # –ó–∞–ø—É—Å–∫ minishell –≤ PTY: –ø–æ—Å—ã–ª–∞–µ–º SIGINT, –∫–æ–≥–¥–∞ –æ–Ω –∂–¥—ë—Ç –≤–≤–æ–¥ heredoc
    # –ü–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: –ø–µ—á–∞—Ç–∞–µ–º –º–∞—Ä–∫–µ—Ä, –∑–∞—Ç–µ–º –ø–µ—á–∞—Ç–∞–µ–º $?, –ø–æ—Ç–æ–º exit
    RAW=$(
        script -qfec "
            ( sleep 0.25; kill -INT \$PPID ) &
            $MINISHELL
        " /dev/null <<'EOS'
cat <<EOF
line1
echo __AFTER__
echo $?
exit
EOS
    )

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—ã–≤–æ–¥: —É–±–∏—Ä–∞–µ–º CR, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –±–∞–Ω–Ω–µ—Ä—ã script (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –µ—Å—Ç—å)
    OUT=$(printf "%s\n" "$RAW" | tr -d '\r' | sed '/^Script started/d;/^Script done/d')
    # –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–≤–æ–π prompt –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º—É—Å–æ—Ä, –∫–∞–∫ –≤ run_test
    OUT=$(printf "%s\n" "$OUT" | grep -v 'ms: ‚ûú' | grep -v '^üêö' | sed '/^exit$/d' | sed '/^$/d')

    # –ü—Ä–æ–≤–µ—Ä–∫–∏:
    # 1) –ï—Å—Ç—å –ø–µ—á–∞—Ç—å ^C –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    echo "$OUT" | grep -qx '\^C'; has_caretC=$?
    # 2) –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å: –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "line1" –æ—Ç cat'–∞
    echo "$OUT" | grep -q '^line1$'; has_line1=$?
    # 3) –ü–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —à–µ–ª–ª –∂–∏–≤ –∏ –ø—Ä–∏–Ω—è–ª —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: –µ—Å—Ç—å "__AFTER__"
    echo "$OUT" | grep -q '^__AFTER__$'; has_after=$?
    # 4) –°—Ç–∞—Ç—É—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è heredoc ‚Äî 130 (bash-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ)
    #    –ú—ã –Ω–∞–ø–µ—á–∞—Ç–∞–ª–∏ "echo $?" –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É ‚Äî –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å "130"
    status_line=$(echo "$OUT" | awk '/^[0-9]+$/{print; exit}')
    if [ "$has_caretC" -eq 0 ] && [ "$has_line1" -ne 0 ] && [ "$has_after" -eq 0 ] && [ "$status_line" = "130" ]; then
        echo "‚úÖ '$name' => OK"
        ((OK++))
    else
        echo "‚ùå '$name' => FAIL"
        echo "   –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥:"
        echo "----------------"
        echo "$OUT"
        echo "----------------"
        ((FAIL++))
    fi
}

run_heredoc_sigint_test


echo
echo "–£—Å–ø–µ—à–Ω–æ: $OK, –û—à–∏–±–æ–∫: $FAIL"
[ $FAIL -eq 0 ]